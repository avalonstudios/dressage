// Rem output with px fallback
@mixin font-size( $sizeValue: 1 ) {
  font-size: ( $sizeValue * 16 ) * 1px;
  font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Clearfix
@mixin clearfix(  ) {
  content: '';
  display: table;
  table-layout: fixed;
}

// Clear after ( not all clearfix need this also )
@mixin clearfix-after(  ) {
  clear: both;
}

// Column width with margin
@mixin column-width( $numberColumns: 3 ) {
  width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin bp( $p, $q: null, $orient: width, $orientation: null ) {
  @if ( $q != null ) {
    @if ( $orientation == null ) {
      @media ( min-#{$orient}: $p * 1px ) and ( max-#{$orient}: $q * 1px ) {
        @content;
      }
    }

    @else {
      @media ( min-#{$orient}: $p * 1px ) and ( max-#{$orient}: $q * 1px ) and ( orientation: $orientation ) {
        @content;
      }
    }
  }

  @else {
    @if ( $orientation == null ) {
      @media ( min-#{$orient}: $p * 1px ) {
        @content;
      }
    }

    @else {
      @media ( min-#{$orient}: $p * 1px ) and ( orientation: $orientation ) {
        @content;
      }
    }
  }
}

@function transit( $el, $time:250, $ease:ease-in-out, $delay:0 ) {
  @return #{$el} #{$time}ms $ease #{$delay}s;
}

@mixin colored-links( $link, $hover: $link, $visited: $hover ) {
  color: $link; //!important;
  transition: transit( color ), transit( border-bottom, 0.5 );

  &:visited {
    color: $visited; //!important;
  }

  &:hover {
    color: $hover; //!important;
  }

  &.ava-nv {
    &:visited {
      color: $link; //!important;
    }

    &:hover {
      color: $hover; //!important;
    }
  }
}

@mixin backimage( $x:50, $y:50 ) {
  position: relative;
  background-position: $x * 1% $y * 1%;
  background-size: cover;
  background-repeat: no-repeat;
}

@mixin absmid( $direction: 'b' ) {
  position: absolute;

  @if ( $direction == 'b' ) {
    top: 50%;
    left: 50%;
    width: 100%;
    transform: translate( -50%, -50% );
  }

  @else if ( $direction == 'v' ) {
    top: 50%;
    transform: translateY( -50% );
  }

  @else if ( $direction == 'h' ) {
    left: 50%;
    transform: translateX( -50% );
  }
}

@mixin do_gradient( $orientation: 'lr', $color: 'wt' ) {
  @if ( $color == 'wt' ) {
    $color: #fff;
  }

  @else {
    $color: #f3f3f3;
  }

  @if ( $orientation == 'lr' ) {
    background: rgb( 255, 255, 255 );
    background: -moz-linear-gradient( 90deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    background: -webkit-linear-gradient( 90deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    background: linear-gradient( 90deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    filter: progid:dximagetransform.microsoft.gradient( startColorstr='#{$color}', endColorstr='#ffffff', GradientType=1 );
  }

  @else if ( $orientation == 'tb' ) {
    background: rgb( 243, 243, 243 );
    background: -moz-linear-gradient( 180deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    background: -webkit-linear-gradient( 180deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    background: linear-gradient( 180deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 85% );
    filter: progid:dximagetransform.microsoft.gradient( startColorstr='#{$color}', endColorstr='#ffffff', GradientType=1 );
  }

  @else {
    background: rgb( 243, 243, 243 );
    background: -moz-linear-gradient( 0deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 100% );
    background: -webkit-linear-gradient( 0deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 100% );
    background: linear-gradient( 0deg, rgba( $color, 1 ) 0%, rgba( white, 0 ) 100% );
    filter: progid:dximagetransform.microsoft.gradient( startColorstr='#{$color}', endColorstr='#ffffff', GradientType=1 );
  }
}

@mixin grey_grad(  ) {
  background: rgb( 255, 255, 255 );
  background: -moz-linear-gradient( 132deg, rgba( 255, 255, 255, 1 ) 0%, rgba( 239, 240, 244, 1 ) 100% );
  background: -webkit-linear-gradient( 132deg, rgba( 255, 255, 255, 1 ) 0%, rgba( 239, 240, 244, 1 ) 100% );
  background: linear-gradient( 132deg, rgba( 255, 255, 255, 1 ) 0%, rgba( 239, 240, 244, 1 ) 100% );
  filter: progid:dximagetransform.microsoft.gradient( startColorstr='#ffffff', endColorstr='#eff0f4', GradientType=1 );
}

@mixin do_select(  ) {
  font-weight: 700;
  padding: 0.6em 2.2em 0.5em 0.8em;
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  margin: 0;
  border: 0;
  //box-shadow: 0 1px 0 1px rgba( 0, 0, 0, 0.04 );
  border-radius: 0.5em;
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: #fff;
  background-image: url( '../images/icons/arrow_blue_down.png' );
  background-repeat: no-repeat;
  background-position: right 0.7em top 50%, 0 0;
  background-size: 18px 18px;

  &::-ms-expand {
    display: none;
  }

  &:hover {
    border-color: #888;
  }

  &:focus {
    border-color: #aaa;
    //box-shadow: 0 0 1px 3px rgba( 59, 153, 252, 0.7 );
    //box-shadow: 0 0 0 3px -moz-mac-focusring;
    color: #222;
    outline: none;
  }

  option {
    font-weight: normal;
  }
}

@mixin half( $el, $t, $r, $b, $l, $divider ) {
  #{$el}: ( $t / $divider ) * 1px ( $r / $divider ) * 1px ( $b / $divider ) * 1px ( $l / $divider ) * 1px;
  transition: transit( $el );
}

@mixin half1( $el, $value, $divider ) {
  #{$el}: ( $value / $divider ) * 1px;
  transition: transit( $el );
}
